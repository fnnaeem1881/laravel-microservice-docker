version: '3.9'
services:

  #PHP Service for first Laravel project
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    container_name: app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www/html/src
    # volumes:
    #   - ./src:/var/www/html/src
    #   - ./php/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
    networks:
      - app-network

  #PHP Service for second Laravel project
  app2:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "9001:9001"
    container_name: app2
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app2
      SERVICE_TAGS: dev
    working_dir: /var/www/html/booking
    # volumes:
    #   - ./booking:/var/www/html/booking
    #   - ./php/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
    networks:
      - app-network
        #PHP Service for second Laravel project
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    container_name: frontend
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: frontend
      SERVICE_TAGS: dev
    working_dir: /var/www/html/frontend
    # volumes:
    #   - ./booking:/var/www/html/booking
    #   - ./php/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
    networks:
      - app-network
  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network
  #Nginx Service
  webserver:
    image: nginx:alpine
    container_name: webserver
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - app-network

  #MySQL Service
  db:
    image: mysql:5.7.32
    container_name: db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: garibook
      MYSQL_ROOT_PASSWORD: garibook
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/mysql/
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    networks:
      - app-network
    # phpMyAdmin Service for the first database
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: garibook
      UPLOAD_LIMIT: 100M
    ports:
      - '8080:80'
    networks:
      - app-network

  # Second MySQL Service
  db2:
    image: mysql:5.7.32
    container_name: db2
    restart: unless-stopped
    tty: true
    ports:
      - "3307:3306" # Use a different port than the first MySQL service
    environment:
      MYSQL_DATABASE: garibook2 # Set the name for the second database
      MYSQL_ROOT_PASSWORD: garibook
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql2
    volumes:
      - dbdata2:/var/lib/mysql/ # Use a different volume for the second database
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    networks:
      - app-network
  # phpMyAdmin Service for the second database
  phpmyadmin2:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin2
    restart: unless-stopped
    environment:
      PMA_HOST: db2
      MYSQL_ROOT_PASSWORD: garibook
      UPLOAD_LIMIT: 100M
    ports:
      - '8181:80'
    networks:
      - app-network
#Docker Networks
networks:
  app-network:
    driver: bridge

#Volumes
volumes:
  dbdata:
    driver: local
  dbdata2:
    driver: local